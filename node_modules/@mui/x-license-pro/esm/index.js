import{b as e,m as t,a as n}from"./generateLicense-4c697767.js";export{g as generateLicence}from"./generateLicense-4c697767.js";import{ponyfillGlobal as i}from"@mui/utils";import*as r from"react";i.__MUI_LICENSE_INFO__=i.__MUI_LICENSE_INFO__||{key:void 0,releaseInfo:void 0};class o{static getKey(){return i.__MUI_LICENSE_INFO__.key}static getReleaseInfo(){return i.__MUI_LICENSE_INFO__.releaseInfo}static setLicenseKey(e){i.__MUI_LICENSE_INFO__.key=e}static setReleaseInfo(e){i.__MUI_LICENSE_INFO__.releaseInfo=e}}var s;function a(e){console.error(["************************************************************","*************************************************************","",...e,"","*************************************************************","*************************************************************"].join("\n"))}function c(){a(["MUI: Invalid license.","","Your license for MUI X is not valid, please visit","https://mui.com/r/x-license to get a valid license."])}function l(){a(["MUI: License key not found.","","This is a trial-only version of MUI X.","While all the features are unlocked, it is not licensed for","development use on projects intended for production.","","To purchase a license, please visit","https://mui.com/r/x-license to get a valid license."])}function u(){a(["MUI: License key expired.","","Please visit https://mui.com/r/x-license to renew","your subscription and get the latest version of MUI X."])}function I(){const t=new Date;return t.setHours(0,0,0,0),e(t.getTime().toString())}!function(e){e.NotFound="NotFound",e.Invalid="Invalid",e.Expired="Expired",e.Valid="Valid"}(s||(s={}));const d=/^.*EXPIRY=([0-9]+),.*$/;function _(e,i){if(!e)throw new Error("MUI: The release information is missing. Not able to validate license.");if(!i)return s.NotFound;const r=i.substr(0,32),o=i.substr(32);if(r!==t(o))return s.Invalid;const a=n(o);let c=0;try{if(c=parseInt(a.match(d)[1],10),!c||Number.isNaN(c))return console.error("Error checking license. Expiry timestamp not found or invalid!"),s.Invalid}catch(e){return console.error("Error extracting license expiry timestamp.",e),s.Invalid}const l=parseInt(n(e),10);if(Number.isNaN(l))throw new Error("MUI: The release information is invalid. Not able to validate license.");return c<l?s.Expired:s.Valid}function f(){return r.useMemo((()=>{const e=_(o.getReleaseInfo(),o.getKey());return e===s.Invalid?c():e===s.NotFound?l():e===s.Expired&&u(),e}),[])}export{o as LicenseInfo,s as LicenseStatus,I as generateReleaseInfo,u as showExpiredLicenseError,c as showInvalidLicenseError,l as showNotFoundLicenseError,f as useLicenseVerifier,_ as verifyLicense};
